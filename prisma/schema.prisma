generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // reviews the user has created
  createdReviews PerformanceReview[] @relation("CreatedReviews")
  // review the user has received
  receivedReview PerformanceReview?  @relation("ReceivedReview")
  // reviews the user has been asked to provide feedback on
  assignments    Assignment[]

  roles Role[]
}

model PerformanceReview {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewer    User         @relation("CreatedReviews", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewerId  String
  reviewee    User         @relation("ReceivedReview", fields: [revieweeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  revieweeId  String       @unique
  assignments Assignment[]
}

model Assignment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review       PerformanceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId     String
  assignedTo   User              @relation(fields: [assignedToId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignedToId String
  feedback     Feedback?
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignmentId String     @unique
}

model Permission {
  id        String   @id @default(cuid())
  action    String // e.g. create, read, update, delete
  entity    String // e.g. note, user, etc.
  access    String // e.g. own or any
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}
